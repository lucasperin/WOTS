from math import factorial as fac, sqrt, floor, log
from functools import reduce, lru_cache
from multiprocessing import Pool
from itertools import product, chain
from random import getrandbits
from scipy.special import comb


myfile = "src/Plot_Encoding_bench.cpp"
header = """
#include <benchmark/benchmark.h>
#include "wots/ClassicWots.h"
#include "wots/ConstantSumWots.h"
#include "wots/VariantConstantSumWots.h"
#include "wots/MConstantSumWots.h"
#include "wots/BSConstantSumWots.h"
#include "primitives/OpenSSLSha256.h"
#include "primitives/OpenSSLSha512.h"


template<class OTS>
class OTSFixture : public benchmark::Fixture, protected OpenSSLSha256 {
public:
	ByteArray data;
	OTS ots;
	virtual void SetUp(benchmark::State& state) {
		data = hstoba("0102030F");
	}
};
"""

template = """
BENCHMARK_TEMPLATE_F(OTSFixture, plot_{},{}<{}, {}, {}, {}>)(benchmark::State& state) {{ 
	std::vector<unsigned int> a;
	for (auto _ : state){{
		data = digest(data);
		benchmark::DoNotOptimize(a = ots.genFingerprint(data));
	}}
}}

"""

tail = "BENCHMARK_MAIN();"

@lru_cache(maxsize=2**30)
def binomial(n, k):
    return comb(n, k, exact=True)


def T_len(blocks, maxi, block_sum=None):
    if block_sum is None:
        block_sum = maxi

    kmax = min(blocks, floor(block_sum / (maxi + 1)))
    t = 0

    for k in range(kmax + 1):
        t += (
            (-1) ** k
            * binomial(blocks, k)
            * binomial(block_sum - (maxi + 1) * k + blocks - 1, blocks - 1)
        )

    return t

def wrap2(t, n):
    res = []
    for s in range(n, 4000):
        tlen = T_len(t, n, s)
        if tlen < 1:
            break
        elif 257 > log(tlen, 2) > 256:
            res.append((t, n, s, t * n, log(tlen, 2)))
    return res



def gen_all(to_write, case="ConstantSumWots", h="OpenSSLSha256"):
    tn = product(range(16, 256), [(1 << w) - 1 for w in range(2, 10)])
    with Pool(processes=4) as pool:
        results = pool.starmap(wrap2, tn)
        for t, n, s, tsn, tlog in chain.from_iterable(results):
            to_write += template.format(str(t)+str(n)+str(s), case, h, n, t, s)
    return to_write

def gen_set(to_write, cases, params): 
    for p in params:
        t = p[0]
        n = p[1]
        s = p[2]
        m = p[4]
        if(m==512):
            h="OpenSSLSha512"
        else:
            h="OpenSSLSha256"
        to_write += template.format(str(t)+str(n)+str(s), "ConstantSumWots", h, s, t, s)
        for c in cases:
            to_write += template.format(str(t)+str(n)+str(s)+c, c, h, n, t, s)
    return to_write

def gen_set(to_write, params): 
    for p in params:
        t = p[0]
        n = p[1]
        s = p[2]
        m = p[4]
        if(m==512):
            h="OpenSSLSha512"
        else:
            h="OpenSSLSha256"
        to_write += template.format(str(t)+str(n)+str(s)+"_0", "ConstantSumWots", h, s, t, s)
        to_write += template.format(str(t)+str(n)+str(s)+"_V", "VariantConstantSumWots", h, int(n*1.2), t, s)
        to_write += template.format(str(t)+str(n)+str(s)+"_G", "ConstantSumWots", h, n, t, s)
        to_write += template.format(str(t)+str(n)+str(s)+"_BS", "BSConstantSumWots", h, n, t, s)
        to_write += template.format(str(t)+str(n)+str(s)+"_M", "MConstantSumWots", h, n, t, s)
    return to_write

if __name__ == "__main__":
    """
    Filter results with
    $ sort -k1n -k3n -k4n results.txt > filtered
    $ for i in {30..80}; do for j in {512..15}; do cat filtered | grep -i "^ *$i *$j " | head -1 | sed -e 's/\..*//g' >> temp ; done; done
    """

    CASES=[
    "VariantConstantSumWots",
    "BSConstantSumWots",
    "MConstantSumWots"
    ]

    PARAMS=[
    [ 30,  511 ,  6008,  15330, 256 ],
    [ 31,  511 ,  4626,  15841, 256 ],
    [ 32,  511 ,  3840,  16352, 256 ],
    [ 33,  511 ,  3274,  16863, 256 ],
    [ 34,  511 ,  2836,  17374, 256 ],
    [ 34,  255 ,  3106,   8670, 256 ],
    [ 35,  511 ,  2485,  17885, 256 ],
    [ 35,  255 ,  2582,   8925, 256 ],
    [ 36,  511 ,  2196,  18396, 256 ],
    [ 36,  255 ,  2235,   9180, 256 ],
    [ 37,  511 ,  1956,  18907, 256 ],
    [ 37,  255 ,  1972,   9435, 256 ],
    [ 38,  511 ,  1755,  19418, 256 ],
    [ 38,  255 ,  1761,   9690, 256 ],
    [ 38,  127 ,  2167,   4826, 256 ],
    [ 39,  511 ,  1584,  19929, 256 ],
    [ 39,  255 ,  1586,   9945, 256 ],
    [ 39,  127 ,  1722,   4953, 256 ],
    [ 40,  511 ,  1437,  20440, 256 ],
    [ 40,  255 ,  1438,  10200, 256 ],
    [ 40,  127 ,  1502,   5080, 256 ],
    [ 41,  511 ,  1312,  20951, 256 ],
    [ 41,  255 ,  1312,  10455, 256 ],
    [ 41,  127 ,  1344,   5207, 256 ],
    [ 42,  511 ,  1203,  21462, 256 ],
    [ 42,  255 ,  1203,  10710, 256 ],
    [ 42,  127 ,  1219,   5334, 256 ],
    [ 43,  511 ,  1108,  21973, 256 ],
    [ 43,  255 ,  1108,  10965, 256 ],
    [ 43,  127 ,  1116,   5461, 256 ],
    [ 44,  511 ,  1025,  22484, 256 ],
    [ 44,  255 ,  1025,  11220, 256 ],
    [ 44,  127 ,  1029,   5588, 256 ],
    [ 45,  511 ,   952,  22995, 256 ],
    [ 45,  255 ,   952,  11475, 256 ],
    [ 45,  127 ,   954,   5715, 256 ],
    [ 45,   63 ,  1070,   2835, 256 ],
    [ 46,  511 ,   887,  23506, 256 ],
    [ 46,  255 ,   887,  11730, 256 ],
    [ 46,  127 ,   888,   5842, 256 ],
    [ 46,   63 ,   951,   2898, 256 ],
    [ 47,  511 ,   829,  24017, 256 ],
    [ 47,  255 ,   829,  11985, 256 ],
    [ 47,  127 ,   830,   5969, 256 ],
    [ 47,   63 ,   867,   2961, 256 ],
    [ 48,  511 ,   778,  24528, 256 ],
    [ 48,  255 ,   778,  12240, 256 ],
    [ 48,  127 ,   778,   6096, 256 ],
    [ 48,   63 ,   801,   3024, 256 ],
    [ 49,  511 ,   732,  25039, 256 ],
    [ 49,  255 ,   732,  12495, 256 ],
    [ 49,  127 ,   732,   6223, 256 ],
    [ 49,   63 ,   746,   3087, 256 ],
    [ 50,  511 ,   690,  25550, 256 ],
    [ 50,  255 ,   690,  12750, 256 ],
    [ 50,  127 ,   690,   6350, 256 ],
    [ 50,   63 ,   699,   3150, 256 ],
    [ 51,  511 ,   653,  26061, 256 ],
    [ 51,  255 ,   653,  13005, 256 ],
    [ 51,  127 ,   653,   6477, 256 ],
    [ 51,   63 ,   658,   3213, 256 ],
    [ 52,  511 ,   619,  26572, 256 ],
    [ 52,  255 ,   619,  13260, 256 ],
    [ 52,  127 ,   619,   6604, 256 ],
    [ 52,   63 ,   622,   3276, 256 ],
    [ 53,  511 ,   588,  27083, 256 ],
    [ 53,  255 ,   588,  13515, 256 ],
    [ 53,  127 ,   588,   6731, 256 ],
    [ 53,   63 ,   590,   3339, 256 ],
    [ 53,   31 ,   722,   1643, 256 ],
    [ 54,  511 ,   560,  27594, 256 ],
    [ 54,  255 ,   560,  13770, 256 ],
    [ 54,  127 ,   560,   6858, 256 ],
    [ 54,   63 ,   561,   3402, 256 ],
    [ 54,   31 ,   633,   1674, 256 ],
    [ 55,  511 ,   534,  28105, 256 ],
    [ 55,  255 ,   534,  14025, 256 ],
    [ 55,  127 ,   534,   6985, 256 ],
    [ 55,   63 ,   535,   3465, 256 ],
    [ 55,   31 ,   581,   1705, 256 ],
    [ 56,  511 ,   511,  28616, 256 ],
    [ 56,  255 ,   510,  14280, 256 ],
    [ 56,  127 ,   510,   7112, 256 ],
    [ 56,   63 ,   511,   3528, 256 ],
    [ 56,   31 ,   543,   1736, 256 ],
    [ 57,  255 ,   488,  14535, 256 ],
    [ 57,  127 ,   488,   7239, 256 ],
    [ 57,   63 ,   489,   3591, 256 ],
    [ 57,   31 ,   511,   1767, 256 ],
    [ 58,  255 ,   468,  14790, 256 ],
    [ 58,  127 ,   468,   7366, 256 ],
    [ 58,   63 ,   469,   3654, 256 ],
    [ 58,   31 ,   485,   1798, 256 ],
    [ 59,  255 ,   450,  15045, 256 ],
    [ 59,  127 ,   450,   7493, 256 ],
    [ 59,   63 ,   450,   3717, 256 ],
    [ 59,   31 ,   462,   1829, 256 ],
    [ 60,  255 ,   433,  15300, 256 ],
    [ 60,  127 ,   433,   7620, 256 ],
    [ 60,   63 ,   433,   3780, 256 ],
    [ 60,   31 ,   441,   1860, 256 ],
    [ 61,  255 ,   417,  15555, 256 ],
    [ 61,  127 ,   417,   7747, 256 ],
    [ 61,   63 ,   417,   3843, 256 ],
    [ 61,   31 ,   423,   1891, 256 ],
    [ 62,  255 ,   402,  15810, 256 ],
    [ 62,  127 ,   402,   7874, 256 ],
    [ 62,   63 ,   402,   3906, 256 ],
    [ 62,   31 ,   407,   1922, 256 ],
    [ 63,  255 ,   388,  16065, 256 ],
    [ 63,  127 ,   388,   8001, 256 ],
    [ 63,   63 ,   388,   3969, 256 ],
    [ 63,   31 ,   392,   1953, 256 ],
    [ 64,  255 ,   375,  16320, 256 ],
    [ 64,  127 ,   375,   8128, 256 ],
    [ 64,   63 ,   375,   4032, 256 ],
    [ 64,   31 ,   378,   1984, 256 ],
    [ 65,  255 ,   363,  16575, 256 ],
    [ 65,  127 ,   363,   8255, 256 ],
    [ 65,   63 ,   363,   4095, 256 ],
    [ 65,   31 ,   365,   2015, 256 ],
    [ 66,  255 ,   352,  16830, 256 ],
    [ 66,  127 ,   352,   8382, 256 ],
    [ 66,   63 ,   352,   4158, 256 ],
    [ 66,   31 ,   353,   2046, 256 ],
    [ 66,   15 ,   442,    990, 256 ],
    [ 67,  255 ,   341,  17085, 256 ],
    [ 67,  127 ,   341,   8509, 256 ],
    [ 67,   63 ,   341,   4221, 256 ],
    [ 67,   31 ,   342,   2077, 256 ],
    [ 67,   15 ,   400,   1005, 256 ],
    [ 68,  255 ,   331,  17340, 256 ],
    [ 68,  127 ,   331,   8636, 256 ],
    [ 68,   63 ,   331,   4284, 256 ],
    [ 68,   31 ,   332,   2108, 256 ],
    [ 68,   15 ,   374,   1020, 256 ],
    [ 69,  255 ,   322,  17595, 256 ],
    [ 69,  127 ,   322,   8763, 256 ],
    [ 69,   63 ,   322,   4347, 256 ],
    [ 69,   31 ,   323,   2139, 256 ],
    [ 69,   15 ,   354,   1035, 256 ],
    [ 70,  255 ,   313,  17850, 256 ],
    [ 70,  127 ,   313,   8890, 256 ],
    [ 70,   63 ,   313,   4410, 256 ],
    [ 70,   31 ,   314,   2170, 256 ],
    [ 70,   15 ,   339,   1050, 256 ]
]

#    [ 71,  255 ,   305,  18105, 256 ],
#    [ 71,  127 ,   305,   9017, 256 ],
#    [ 71,   63 ,   305,   4473, 256 ],
#    [ 71,   31 ,   305,   2201, 256 ],
#    [ 71,   15 ,   325,   1065, 256 ],
#    [ 72,  255 ,   297,  18360, 256 ],
#    [ 72,  127 ,   297,   9144, 256 ],
#    [ 72,   63 ,   297,   4536, 256 ],
#    [ 72,   31 ,   297,   2232, 256 ],
#    [ 72,   15 ,   313,   1080, 256 ],
#    [ 73,  255 ,   290,  18615, 256 ],
#    [ 73,  127 ,   290,   9271, 256 ],
#    [ 73,   63 ,   290,   4599, 256 ],
#    [ 73,   31 ,   290,   2263, 256 ],
#    [ 73,   15 ,   303,   1095, 256 ],
#    [ 74,  255 ,   283,  18870, 256 ],
#    [ 74,  127 ,   283,   9398, 256 ],
#    [ 74,   63 ,   283,   4662, 256 ],
#    [ 74,   31 ,   283,   2294, 256 ],
#    [ 74,   15 ,   293,   1110, 256 ],
#    [ 75,  255 ,   276,  19125, 256 ],
#    [ 75,  127 ,   276,   9525, 256 ],
#    [ 75,   63 ,   276,   4725, 256 ],
#    [ 75,   31 ,   276,   2325, 256 ],
#    [ 75,   15 ,   285,   1125, 256 ],
#    [ 76,  255 ,   270,  19380, 256 ],
#    [ 76,  127 ,   270,   9652, 256 ],
#    [ 76,   63 ,   270,   4788, 256 ],
#    [ 76,   31 ,   270,   2356, 256 ],
#    [ 76,   15 ,   277,   1140, 256 ],
#    [ 77,  255 ,   264,  19635, 256 ],
#    [ 77,  127 ,   264,   9779, 256 ],
#    [ 77,   63 ,   264,   4851, 256 ],
#    [ 77,   31 ,   264,   2387, 256 ],
#    [ 77,   15 ,   270,   1155, 256 ],
#    [ 78,  255 ,   258,  19890, 256 ],
#    [ 78,  127 ,   258,   9906, 256 ],
#    [ 78,   63 ,   258,   4914, 256 ],
#    [ 78,   31 ,   258,   2418, 256 ],
#    [ 78,   15 ,   263,   1170, 256 ],
#    [ 79,  127 ,   252,  10033, 256 ],
#    [ 79,   63 ,   252,   4977, 256 ],
#    [ 79,   31 ,   252,   2449, 256 ],
#    [ 79,   15 ,   257,   1185, 256 ],
#    [ 80,  127 ,   247,  10160, 256 ],
#    [ 80,   63 ,   247,   5040, 256 ],
#    [ 80,   31 ,   247,   2480, 256 ],
#    [ 80,   15 ,   251,   1200, 256 ]
#    ]


    to_write = header
    to_write = gen_set(to_write, PARAMS)
    to_write += tail
    print(to_write)














